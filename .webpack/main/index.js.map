{"version":3,"file":"index.js","mappings":";;;;;;;;;;AAAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;;;;ACtBA,iEAA6C;AAI7C,SAAS,YAAY;IACnB,6BAA6B;IAC7B,IAAM,UAAU,GAAG,IAAI,wBAAa,CAAC;QACnC,MAAM,EAAE,GAAG;QACX,KAAK,EAAE,GAAG;QACV,cAAc,EAAE;YACd,eAAe,EAAE,IAAI;YACrB,OAAO,EAAE,SAAiC;SAC3C;KACF,CAAC;IAEF,sCAAsC;IACtC,UAAU,CAAC,OAAO,CAAC,mCAAyB,CAAC;IAE7C,qBAAqB;IACrB,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE;AACvC,CAAC;AAED,wDAAwD;AACxD,yDAAyD;AACzD,sDAAsD;AACtD,cAAG,CAAC,EAAE,CAAC,OAAO,EAAE;IACd,YAAY,EAAE;IAEd,cAAG,CAAC,EAAE,CAAC,UAAU,EAAE;QACjB,iEAAiE;QACjE,4DAA4D;QAC5D,IAAI,wBAAa,CAAC,aAAa,EAAE,CAAC,MAAM,KAAK,CAAC;YAAE,YAAY,EAAE;IAChE,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,wEAAwE;AACxE,0EAA0E;AAC1E,2BAA2B;AAC3B,cAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE;IAC1B,IAAI,OAAO,CAAC,QAAQ,KAAK,QAAQ,EAAE;QACjC,cAAG,CAAC,IAAI,EAAE;KACX;AACH,CAAC,CAAC;AAEF,4EAA4E;AAC5E,uEAAuE","sources":["webpack://binmanager/external node-commonjs \"electron\"","webpack://binmanager/webpack/bootstrap","webpack://binmanager/./src/main.ts"],"sourcesContent":["module.exports = require(\"electron\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { app, BrowserWindow } from 'electron'\ndeclare const MAIN_WINDOW_WEBPACK_ENTRY: string\ndeclare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string\n\nfunction createWindow() {\n  // Create the browser window.\n  const mainWindow = new BrowserWindow({\n    height: 800,\n    width: 800,\n    webPreferences: {\n      nodeIntegration: true,\n      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,\n    },\n  })\n\n  // and load the index.html of the app.\n  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)\n\n  // Open the DevTools.\n  mainWindow.webContents.openDevTools()\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.on('ready', () => {\n  createWindow()\n\n  app.on('activate', function () {\n    // On macOS it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n  })\n})\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\n// In this file you can include the rest of your app\"s specific main process\n// code. You can also put them in separate files and require them here.\n"],"names":[],"sourceRoot":""}